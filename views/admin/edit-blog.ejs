<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Blog Post - Admin Dashboard</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Quill Rich Text Editor CSS -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <!-- Favicon and App Icons -->
    <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
    <link rel="manifest" href="/images/site.webmanifest">
    <style>
        /* Colors and theme variables */
        :root {
            --primary-color: #643c94;
            --secondary-color: #f3eb2e;
            --text-color: #333333;
            --light-text: #666666;
            --lighter-text: #999999;
            --border-color: #ddd;
            --hover-bg: #e0e0e0;
            --error-color: #dc3545;
            --error-hover: #ff0000;
            --bg-color: #ffffff;
            --light-bg: #f0f0f0;
            --highlight-bg: rgba(100, 60, 148, 0.05);
        }

        /* Fix for Quill editor text display */
        .ql-editor {
            color: var(--text-color) !important;
            background-color: var(--bg-color);
            min-height: 350px;
            font-size: 16px;
            line-height: 1.6;
        }

        .ql-editor p {
            color: var(--text-color) !important;
        }

        .ql-editor.ql-blank::before {
            color: var(--lighter-text) !important;
            font-style: italic;
        }

        /* Admin layout styles */
        .admin-container {
            padding-top: 150px;
            max-width: 1200px;
            margin: 0 auto;
            padding-left: 20px;
            padding-right: 20px;
            min-height: calc(100vh - 200px);
            width: 100%;
            box-sizing: border-box;
            position: relative;
            overflow: hidden;
        }

        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .admin-title {
            color: var(--primary-color);
            margin: 0;
        }

        /* Form styling */
        .admin-form, .form-container {
            width: 100%;
            max-width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }

        .admin-form {
            background: var(--bg-color);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin-bottom: 40px;
            border: 3px solid var(--secondary-color);
        }

        .form-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .form-row {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            color: var(--primary-color);
            font-weight: bold;
        }

        .form-input, .form-textarea, .tag-input {
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-input:focus, .form-textarea:focus, .tag-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .form-textarea {
            min-height: 150px;
            resize: vertical;
        }

        .tag-hint {
            font-size: 0.9rem;
            color: var(--light-text);
            margin-top: 5px;
        }

        /* Info notice styling */
        .info-notice {
            margin-top: 20px;
            color: var(--primary-color);
            padding: 10px;
            background: var(--highlight-bg);
            border-radius: 5px;
        }

        /* Button styles */
        .back-button, .admin-submit, .discard-button, .image-upload-btn, .file-label {
            padding: 10px 15px;
            border-radius: 5px;
            transition: all 0.3s;
            font-size: 1.1rem;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-align: center;
        }

        .back-button, .admin-submit, .image-upload-btn, .file-label {
            background: var(--primary-color);
            color: white;
            border: none;
            text-decoration: none;
        }

        .back-button:hover, .admin-submit:hover, .image-upload-btn:hover, .file-label:hover {
            background: var(--secondary-color);
            color: var(--primary-color);
            transform: translateY(-2px);
            text-decoration: none;
        }

        .discard-button {
            background: var(--light-bg);
            color: var(--primary-color);
            border: 1px solid var(--border-color);
            justify-content: center;
            text-decoration: none;
        }

        .discard-button:hover {
            background: var(--hover-bg);
            border-color: #ccc;
        }

        .button-container {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        /* File upload styling */
        .file-input {
            position: absolute;
            width: 0.1px;
            height: 0.1px;
            opacity: 0;
        }

        .file-selected {
            margin-left: 15px;
            color: var(--light-text);
        }

        /* Featured image styling */
        .featured-image, .image-container img {
            width: 100%;
            max-width: 300px;
            margin: 15px 0;
            border-radius: 5px;
            border: 2px solid var(--primary-color);
        }

        .current-featured-image {
            margin: 15px 0;
        }

        .image-container {
            position: relative;
            display: inline-block;
            max-width: 300px;
        }

        .remove-featured-image {
            position: absolute;
            top: -10px;
            right: -10px;
            background: var(--error-color);
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s;
        }

        .remove-featured-image:hover {
            background: var(--error-hover);
            transform: scale(1.1);
        }

        /* Quill editor customizations */
        #editor-container {
            height: 400px;
            margin-bottom: 20px;
        }

        .ql-toolbar.ql-snow {
            border-radius: 5px 5px 0 0;
            border-color: var(--border-color);
        }

        .ql-container.ql-snow {
            border-radius: 0 0 5px 5px;
            border-color: var(--border-color);
        }

        .image-upload-wrapper {
            margin-top: 10px;
        }

        /* Responsive styles */
        html, body {
            overflow-x: hidden;
            width: 100%;
            position: relative;
        }

        .main-header, .site-footer {
            width: 100%;
            max-width: 100%;
            overflow: hidden;
        }

        @media (max-width: 768px) {
            * {
                max-width: 100%;
                box-sizing: border-box;
            }
            
            .admin-container {
                padding-left: 10px;
                padding-right: 10px;
            }
            
            .admin-form {
                padding: 20px 15px;
            }
            
            input, textarea, select, button {
                max-width: 100%;
                box-sizing: border-box;
            }
            
            .admin-header {
                flex-direction: column;
                text-align: center;
            }
            
            .button-container {
                flex-direction: column;
                gap: 10px;
            }
            
            .admin-submit, .discard-button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <!-- Header Section -->
    <%- include('../partials/header') %>

    <div class="admin-container">
        <div class="admin-header">
            <h1 class="admin-title"><i class="fas fa-edit"></i> Edit Blog Post</h1>
            <a href="/admin" class="back-button">
                <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
        </div>

        <form class="admin-form" action="/admin/update-blog/<%= post.id %>" method="POST" enctype="multipart/form-data" id="blogForm">
            <div class="form-container">
                <!-- Blog Title Field -->
                <div class="form-row">
                    <label class="form-label">
                        <i class="fas fa-heading"></i> Blog Title
                    </label>
                    <input type="text" name="title" class="form-input" value="<%= post.title %>" required>
                </div>

                <!-- Content Field with Quill Editor -->
                <div class="form-row">
                    <label class="form-label">
                        <i class="fas fa-paragraph"></i> Content
                    </label>
                    <!-- Quill editor container -->
                    <div id="editor-container"></div>
                    <!-- Hidden textarea to store HTML content -->
                    <textarea name="content" id="content-field" style="display: none;"><%= post.content %></textarea>
                    
                    <!-- Custom image upload for inserting into content -->
                    <div class="image-upload-wrapper">
                        <input type="file" accept="image/*" id="inline-image-upload" style="display: none;">
                        <button type="button" class="image-upload-btn" id="image-button">
                            <i class="fas fa-image"></i> Insert Image
                        </button>
                    </div>
                    <p class="tag-hint info-notice">
                        <i class="fas fa-info-circle"></i> Accepted file formats: JPG/JPEG, PNG, and GIF images only. For faster page loading and better performance, please optimize images before uploading. You can use tools like <a href="https://www.iloveimg.com/compress-image" target="_blank" style="color: #643c94; text-decoration: underline;">iLoveIMG</a>, <a href="https://imagecompressor.com/" target="_blank" style="color: #643c94; text-decoration: underline;">Optimizilla</a>, or any other image compression tool of your preference.
                    </p>
                </div>

                <!-- Excerpt Field -->
                <div class="form-row">
                    <label class="form-label">
                        <i class="fas fa-quote-left"></i> Excerpt
                    </label>
                    <textarea name="excerpt" class="form-textarea" required><%= post.excerpt %></textarea>
                </div>

                <!-- Tags Field -->
                <div class="form-row">
                    <label class="form-label">
                        <i class="fas fa-tags"></i> Tags
                    </label>
                    <input type="text" name="tags" class="tag-input" value="<%= post.tags.join(', ') %>">
                    <p class="tag-hint">Separate tags with commas (e.g., teambuilding, leadership, training)</p>
                </div>

                <!-- Featured Image Field -->
                <div class="form-row">
                    <label class="form-label">
                        <i class="fas fa-image"></i> Featured Image
                    </label>
                    
                    <% if (post.image) { %>
                        <div class="current-featured-image">
                            <div class="image-container">
                                <img src="/uploads/<%= post.image %>" alt="Current featured image">
                                <button type="button" class="remove-featured-image" onclick="removeFeaturedImage()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <!-- Hidden field to track if featured image should be removed -->
                            <input type="hidden" name="removeFeaturedImage" id="removeFeaturedImage" value="false">
                        </div>
                    <% } %>
                    
                    <div class="file-upload">
                        <input type="file" name="blogImage" accept="image/*" id="blogFileInput" class="file-input">
                        <label for="blogFileInput" class="file-label">
                            <i class="fas fa-cloud-upload-alt"></i> 
                            <%= post.image ? 'Change Featured Image' : 'Add Featured Image' %>
                        </label>
                        <span class="file-selected">No file selected</span>
                    </div>
                    <p class="tag-hint info-notice">
                        <i class="fas fa-info-circle"></i> Accepted file formats: JPG/JPEG, PNG, and GIF images only. For faster page loading and better performance, please optimize images before uploading. You can use tools like <a href="https://www.iloveimg.com/compress-image" target="_blank" style="color: #643c94; text-decoration: underline;">iLoveIMG</a>, <a href="https://imagecompressor.com/" target="_blank" style="color: #643c94; text-decoration: underline;">Optimizilla</a>, or any other image compression tool of your preference.
                    </p>
                </div>

                <!-- Button Container -->
                <div class="button-container">
                    <button type="submit" class="admin-submit">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                    <a href="/admin?tab=blog" class="discard-button" onclick="return confirmDiscard()">
                        <i class="fas fa-times"></i> Discard Changes
                    </a>
                </div>
            </div>
        </form>
    </div>

    <%- include('../partials/footer') %>

    <!-- Quill JS -->
    <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <script>
    /**
     * Global variables for tracking form state
     */
    let formChanged = false;
    let quillChanged = false;
    let originalQuillContent = '';
    let selectedImage = null;

    /**
     * Makes the Quill editor resizable by adding a drag handle
     * @param {string} editorContainerId - The ID of the editor container element
     * @returns {Function} Cleanup function to remove event listeners
     */
    function makeEditorResizable(editorContainerId) {
        const editorContainer = document.getElementById(editorContainerId);
        if (!editorContainer) return;
        
        // Set initial styles for the container
        editorContainer.style.position = 'relative';
        editorContainer.style.resize = 'vertical';
        editorContainer.style.overflow = 'hidden';
        editorContainer.style.minHeight = '400px';
        editorContainer.style.transition = 'none';
        
        // Create and add a resize handle
        const resizeHandle = document.createElement('div');
        resizeHandle.className = 'editor-resize-handle';
        resizeHandle.innerHTML = '<i class="fas fa-grip-lines"></i>';
        resizeHandle.style.position = 'absolute';
        resizeHandle.style.bottom = '0';
        resizeHandle.style.width = '100%';
        resizeHandle.style.height = '15px';
        resizeHandle.style.background = '#f0f0f0';
        resizeHandle.style.borderTop = '1px solid #ddd';
        resizeHandle.style.cursor = 'ns-resize';
        resizeHandle.style.textAlign = 'center';
        resizeHandle.style.color = '#643c94';
        resizeHandle.style.display = 'flex';
        resizeHandle.style.alignItems = 'center';
        resizeHandle.style.justifyContent = 'center';
        
        // Add hover effect
        resizeHandle.addEventListener('mouseover', () => {
            resizeHandle.style.background = '#e0e0e0';
        });
        
        resizeHandle.addEventListener('mouseout', () => {
            resizeHandle.style.background = '#f0f0f0';
        });
        
        editorContainer.appendChild(resizeHandle);
        
        // Setup resize functionality
        let startY, startHeight;
        
        const handleMouseDown = (e) => {
            startY = e.clientY;
            startHeight = parseInt(document.defaultView.getComputedStyle(editorContainer).height, 10);
            
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
            
            e.preventDefault();
        };
        
        const handleMouseMove = (e) => {
            const newHeight = startHeight + e.clientY - startY;
            
            if (newHeight > 200 && newHeight < 1000) {
                editorContainer.style.height = `${newHeight}px`;
                
                const qlEditor = editorContainer.querySelector('.ql-editor');
                if (qlEditor) {
                    qlEditor.style.height = `${newHeight - 42}px`; // Subtract toolbar height
                }
            }
        };
        
        const handleMouseUp = () => {
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
        };
        
        resizeHandle.addEventListener('mousedown', handleMouseDown);
        
        return () => {
            resizeHandle.removeEventListener('mousedown', handleMouseDown);
        };
    }

    /**
     * Confirms before discarding changes
     * @returns {boolean} True if okay to discard, false otherwise
     */
    function confirmDiscard() {
        return !(formChanged || quillChanged) || confirm("Are you sure you want to discard all changes? Any unsaved changes will be lost.");
    }

    /**
     * Marks featured image for removal
     */
    function removeFeaturedImage() {
        const imageContainer = document.querySelector('.image-container');
        imageContainer.style.opacity = '0.3';
        
        document.getElementById('removeFeaturedImage').value = 'true';
        
        const removeButton = document.querySelector('.remove-featured-image');
        removeButton.innerHTML = '<i class="fas fa-undo"></i>';
        removeButton.setAttribute('onclick', 'restoreFeaturedImage()');
        
        const fileLabel = document.querySelector('.file-label');
        fileLabel.innerHTML = '<i class="fas fa-cloud-upload-alt"></i> Add New Featured Image';
        
        formChanged = true;
    }

    /**
     * Restores featured image after marking for removal
     */
    function restoreFeaturedImage() {
        const imageContainer = document.querySelector('.image-container');
        imageContainer.style.opacity = '1';
        
        document.getElementById('removeFeaturedImage').value = 'false';
        
        const removeButton = document.querySelector('.remove-featured-image');
        removeButton.innerHTML = '<i class="fas fa-times"></i>';
        removeButton.setAttribute('onclick', 'removeFeaturedImage()');
        
        const fileLabel = document.querySelector('.file-label');
        fileLabel.innerHTML = '<i class="fas fa-cloud-upload-alt"></i> Change Featured Image';
        
        formChanged = true;
    }

    /**
     * Sets up image resizing functionality in Quill editor
     * @param {Quill} quill - The Quill editor instance
     */
    function setupImageResizingInQuill(quill) {
        // Create UI elements for image resizing
        const quillContainer = quill.container.parentNode;
        quillContainer.style.position = 'relative';
        
        const overlay = document.createElement('div');
        overlay.classList.add('image-resize-overlay');
        overlay.style.display = 'none';
        overlay.style.position = 'absolute';
        overlay.style.border = '2px dashed #643c94';
        overlay.style.pointerEvents = 'none';
        
        const resizeHandle = document.createElement('div');
        resizeHandle.classList.add('image-resize-handle');
        resizeHandle.style.width = '10px';
        resizeHandle.style.height = '10px';
        resizeHandle.style.position = 'absolute';
        resizeHandle.style.bottom = '-5px';
        resizeHandle.style.right = '-5px';
        resizeHandle.style.background = '#643c94';
        resizeHandle.style.cursor = 'nwse-resize';
        resizeHandle.style.pointerEvents = 'all';
        
        const sizeControl = document.createElement('div');
        sizeControl.classList.add('image-size-control');
        sizeControl.style.position = 'absolute';
        sizeControl.style.top = '-30px';
        sizeControl.style.left = '0';
        sizeControl.style.background = 'rgba(100, 60, 148, 0.8)';
        sizeControl.style.color = 'white';
        sizeControl.style.padding = '4px 8px';
        sizeControl.style.borderRadius = '3px';
        sizeControl.style.pointerEvents = 'all';
        sizeControl.style.display = 'flex';
        sizeControl.style.alignItems = 'center';
        sizeControl.style.gap = '8px';
        
        const widthLabel = document.createElement('span');
        widthLabel.textContent = 'Width (px):';
        widthLabel.style.fontSize = '12px';
        
        const widthInput = document.createElement('input');
        widthInput.type = 'number';
        widthInput.min = '50';
        widthInput.max = '1000';
        widthInput.placeholder = 'Width';
        widthInput.style.width = '70px';
        widthInput.style.background = 'white';
        widthInput.style.color = '#333';
        widthInput.style.border = 'none';
        widthInput.style.borderRadius = '3px';
        widthInput.style.padding = '3px';
        
        sizeControl.appendChild(widthLabel);
        sizeControl.appendChild(widthInput);
        
        overlay.appendChild(resizeHandle);
        overlay.appendChild(sizeControl);
        quillContainer.appendChild(overlay);
        
        // Update overlay position based on selected image
        function updateOverlayPosition() {
            if (!selectedImage) {
                overlay.style.display = 'none';
                return;
            }
            
            const rect = selectedImage.getBoundingClientRect();
            const containerRect = quillContainer.getBoundingClientRect();
            
            overlay.style.display = 'block';
            overlay.style.left = (rect.left - containerRect.left) + 'px';
            overlay.style.top = (rect.top - containerRect.top) + 'px';
            overlay.style.width = rect.width + 'px';
            overlay.style.height = rect.height + 'px';
            
            widthInput.value = selectedImage.width;
        }
        
        // Handle image selection
        quill.root.addEventListener('click', function(e) {
            if (e.target && e.target.tagName === 'IMG') {
                selectedImage = e.target;
                updateOverlayPosition();
                e.preventDefault();
                e.stopPropagation();
            } else {
                selectedImage = null;
                overlay.style.display = 'none';
            }
        });
        
        // Handle width input changes
        widthInput.addEventListener('change', function(e) {
            if (selectedImage && this.value >= 50 && this.value <= 1000) {
                selectedImage.width = this.value;
                updateOverlayPosition();
                quillChanged = true;
            }
            e.preventDefault();
            e.stopPropagation();
        });
        
        widthInput.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
        });
        
        // Handle resize with drag
        let isResizing = false;
        let startX, startY, startWidth, startHeight;
        
        resizeHandle.addEventListener('mousedown', function(e) {
            if (!selectedImage) return;
            
            isResizing = true;
            startX = e.clientX;
            startY = e.clientY;
            startWidth = selectedImage.width;
            startHeight = selectedImage.height;
            
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
            
            e.preventDefault();
            e.stopPropagation();
        });
        
        function handleMouseMove(e) {
            if (!isResizing) return;
            
            const deltaX = e.clientX - startX;
            const newWidth = Math.max(50, Math.min(1000, startWidth + deltaX));
            
            selectedImage.width = newWidth;
            updateOverlayPosition();
            quillChanged = true;
            
            e.preventDefault();
            e.stopPropagation();
        }
        
        function handleMouseUp(e) {
            isResizing = false;
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
            
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }
        }
        
        // Handle window resize
        window.addEventListener('resize', function() {
            if (selectedImage) {
                updateOverlayPosition();
            }
        });
        
        // Clean up selection when clicking outside
        document.addEventListener('click', function(e) {
            if (!quillContainer.contains(e.target)) {
                selectedImage = null;
                overlay.style.display = 'none';
            }
        });
    }

    // Initialize everything when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Form reference
        const form = document.getElementById('blogForm');
        
        // Mobile menu functionality
        const menuToggle = document.querySelector('.menu-toggle');
        const nav = document.querySelector('.main-header nav ul');
        
        if (menuToggle) {
            menuToggle.addEventListener('click', function() {
                this.classList.toggle('active');
                nav.classList.toggle('active');
            });

            // Close menu when clicking outside
            document.addEventListener('click', function(e) {
                if (!menuToggle.contains(e.target) && !nav.contains(e.target)) {
                    menuToggle.classList.remove('active');
                    nav.classList.remove('active');
                }
            });
        }

        // Initialize resizable editor
        if (document.getElementById('editor-container')) {
            makeEditorResizable('editor-container');
        }

        // Track changes in form inputs
        const inputs = form.querySelectorAll('input, textarea');
        inputs.forEach(input => {
            input.addEventListener('change', () => {
                formChanged = true;
            });
            input.addEventListener('keyup', () => {
                formChanged = true;
            });
        });
        
        // Reset change flags on form submission
        form.addEventListener('submit', function() {
            formChanged = false;
            quillChanged = false;
        });
        
        // Intercept navigation links
        document.querySelectorAll('nav a, .back-button').forEach(link => {
            link.addEventListener('click', function(e) {
                if ((formChanged || quillChanged) && !confirm('You have unsaved changes. Are you sure you want to leave this page?')) {
                    e.preventDefault();
                }
            });
        });

        // File input handling
        document.getElementById('blogFileInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            const label = e.target.parentElement.querySelector('.file-selected');
            label.textContent = file ? file.name : 'No file selected';
            formChanged = true;
        });

        // Initialize Quill editor
        const quill = new Quill('#editor-container', {
            modules: {
                toolbar: [
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                    [{ 'align': [] }],
                    ['link', 'blockquote'],
                    ['clean']
                ]
            },
            theme: 'snow'
        });

        // Setup image resizing in Quill
        setupImageResizingInQuill(quill);

        // Set initial content and save original state
        quill.root.innerHTML = document.getElementById('content-field').value;
        originalQuillContent = quill.root.innerHTML;

        // Track Quill editor changes
        quill.on('text-change', function(delta, oldDelta, source) {
            if (source === 'user') {
                quillChanged = (quill.root.innerHTML !== originalQuillContent);
                // Update hidden field
                document.getElementById('content-field').value = quill.root.innerHTML;
            }
        });

        // Update hidden field with Quill content on form submission
        form.addEventListener('submit', function() {
            document.getElementById('content-field').value = quill.root.innerHTML;
        });

        // Image Upload Button functionality
        document.getElementById('image-button').addEventListener('click', function() {
            document.getElementById('inline-image-upload').click();
        });

        // Handle image upload to insert into Quill
        document.getElementById('inline-image-upload').addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('file', file);
                
                fetch('/admin/upload-inline-image', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.location) {
                        // Get current cursor position or selection
                        const range = quill.getSelection(true);
                        
                        // Insert image at current cursor position
                        quill.insertEmbed(range.index, 'image', data.location);
                        // Move cursor to right after the inserted image
                        quill.setSelection(range.index + 1);
                        // Mark as changed
                        quillChanged = true;
                    } else {
                        alert('Image upload failed');
                    }
                })
                .catch(error => {
                    console.error('Error uploading image:', error);
                    alert('Image upload failed');
                });

                // Reset file input
                this.value = '';
            }
        });
        
        // Add beforeunload event to warn before leaving the page
        window.addEventListener('beforeunload', function(e) {
            if (formChanged || quillChanged) {
                e.preventDefault();
                e.returnValue = 'You have unsaved changes. Are you sure you want to leave this page?';
                return 'You have unsaved changes. Are you sure you want to leave this page?';
            }
        });
    });
    </script>
</body>
</html>